function tplawesome(e,t){res=e;for(var n=0;n<t.length;n++){res=res.replace(/\{\{(.*?)\}\}/g,function(e,r){return t[n][r]})}return res}

$(function() {
    $("form").on("submit", function(e) {
       e.preventDefault();
       // prepare the request
       // 2. This code loads the IFrame Player API code asynchronously.
       var tag = document.createElement('script');

       tag.src = "https://www.youtube.com/iframe_api";
       var firstScriptTag = document.getElementsByTagName('script')[0];
       firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

       // 3. This function creates an <iframe> (and YouTube player)
       //    after the API code downloads.


       var request = gapi.client.youtube.search.list({
            part: "snippet",
            type: "video",
            q: "cows",
            maxResults: 3,
            order: "viewCount",
            publishedAfter: "2010-01-01T00:00:00Z"
       });
       // execute the request
       request.execute(function(response) {
          var results = response.result;
          $("#results").html("");
          var player2;
          $.each(results.items, function(index, item) {
          function onYouTubeIframeAPIReady() {
            player2 = new YT.Player('player2', {
              height: '300',
              width: '300',
              videoId: item.id.videoId,
              events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
              }
            });
          }
       });
   });





       // 4. The API will call this function when the video player is ready.
       function onPlayerReady(event) {
         event.target.playVideo();
         //player.seekTo(0, true);
       }

       // 5. The API calls this function when the player's state changes.
       //    The function indicates that when playing a video (state=1),
       //    the player should play for six seconds and then stop.
       var done = false;
       function onPlayerStateChange(event) {
           if (!done) {
             player2.seekTo(0, true);
             done = true;
           }
         if (event.data == YT.PlayerState.PLAYING && !done) {
           //setTimeout(stopVideo, 6000);
           //done = true;
         }
         if (event.data == YT.PlayerState.ENDED) {
             player2.playVideo();
         }
       }
       function stopVideo() {
         //player.stopVideo();
         //player.playVideoAt(0);
         //player.seekTo(0, true);
       }
       function init() {
           gapi.client.setApiKey("AIzaSyBZyYgmaK8pHWd2ry6sCMODh7w3-Ju4YG8");
           gapi.client.load("youtube", "v3", function() {
               // yt api is ready
           });
       }
   })
   })

function init() {
    gapi.client.setApiKey("AIzaSyBZyYgmaK8pHWd2ry6sCMODh7w3-Ju4YG8");
    gapi.client.load("youtube", "v3", function() {
        // yt api is ready
    });
}
